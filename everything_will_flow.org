#+Title: Clojure West Recap: Everything Will Flow
#+Author: Alex Kehayias
#+Email: @alexkehayias

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil

#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 1
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Clojure West">
#+REVEAL_POSTAMBLE: <p>Created by Alex Kehayias</p>
#+REVEAL_PLUGINS: (highlight markdown notes zoom)

* Queues
**** Separate the "what" from the "when"
**** Address infinite demand with finite resources
**** Interface between separate systems
**** Closed vs Open systems
**** The difference is coordination (or lack of)
* Behavior of ubounded queues
**** Single consumer - latency increases exponentially
**** Mulitple consumers - latency increases... exponentially
**** Only difference is the amount amount of requests before it falls over
* "Unbounded queues are fundamentally broken"
Puts the correctness of your system in someone else's hands
* Solving the too much data problem
**** Drop
**** Reject
**** Pause
* core.async as an example
**** Channels are unbuffered by default (closed system, faster)
**** Buffered channels are open systems (error if buffer is full, slower)
**** Don't chain together buffered queues (more latency)

#+BEGIN_SRC clojure
;; Unbuffered
(let [c (chan)]
  (go (>! c "hello"))
  (assert (= "hello" (<!! (go (<! c)))))
  (close! c))

;; Buffered, this will throw
(let [c (chan 1)]
  (go (>! c "hello"))
  (go (>! c "hello again")))
#+END_SRC
