#+Title: Clojure West Recap: Beyond Parallelism
#+Author: Alex Kehayias
#+Email: @alexkehayias

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil

#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 1
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Clojure West">
#+REVEAL_POSTAMBLE: <p>Created by Alex Kehayias</p>
#+REVEAL_PLUGINS: (highlight markdown notes zoom)

* Core
**** future ("ubounded" global thread pool)
**** pmap (wraps futures, lazy)
**** agents (fixed thread pool)
* Lazyness, a blessing and a curse
**** Example:
#+BEGIN_SRC clojure
;; Unevaluated
(pmap inc (range 99))

;; Force evaluation
(doall (pmap inc (range 99)))
#+END_SRC
**** Combining many lazy pmaps is slow
**** Often programs are eager
* Claypoole
**** Eager by default
**** Results are unordered, first one back is first to be realized
**** Configurable threadpool that is first class
**** Priority
**** Use where you would use pmap
* Example
#+BEGIN_SRC clojure
(require '[com.climate.claypoole :as cp])
;; A threadpool with 2 threads.
(def pool (cp/threadpool 2))
;; Future
(def fut (cp/future pool (myfn myinput)))
;; Ordered pmap
(def intermediates (cp/pmap pool myfn1 myinput-a myinput-b))
;; We can feed the streaming sequence right into another parallel function.
(def output (cp/pmap pool myfn2 intermediates))
;; We can read the output from the stream as it is available.
(doseq [o output] (prn o))
;; NOTE: The JVM doesn't automatically clean up threads for us.
(cp/shutdown pool)
#+END_SRC
